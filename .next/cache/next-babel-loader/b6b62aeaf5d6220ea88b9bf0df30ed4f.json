{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { createEpicMiddleware, combineEpics } from 'redux-observable';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport getConfig from \"next/config\";\nimport mainPageReducer from \"../modules/MainPage/reducer\";\nimport wordPairReducer from \"../modules/WordPair/reducer\";\nimport wordPairEpics from \"../modules/WordPair/epics\";\nimport annotationReducer from \"../modules/Annotation/reducer\";\nimport annotationEpics from \"../modules/Annotation/epics\";\n\nvar _getConfig = getConfig(),\n    publicRuntimeConfig = _getConfig.publicRuntimeConfig;\n\nvar rootReducer = combineReducers({\n  wordPairState: wordPairReducer,\n  mainPageState: mainPageReducer,\n  annotationState: annotationReducer\n});\nvar rootEpic = combineEpics(wordPairEpics, annotationEpics);\nexport default function initStore(initialState) {\n  var epicMiddleware = createEpicMiddleware({\n    dependencies: {\n      apiBaseUrl: publicRuntimeConfig.apiBaseUrl\n    }\n  });\n  var logger = createLogger({\n    collapsed: true\n  }); // log every action to see what's happening behind the scenes.\n\n  var reduxMiddleware = applyMiddleware(epicMiddleware, logger);\n  var store = createStore(rootReducer, initialState, composeWithDevTools(reduxMiddleware));\n  epicMiddleware.run(rootEpic);\n  return store;\n}","map":{"version":3,"sources":["C:/Users/yerla/UI/Semester7/TACodes/word-relation-gamification-frontend/config/redux.js"],"names":["createStore","applyMiddleware","combineReducers","createLogger","createEpicMiddleware","combineEpics","composeWithDevTools","getConfig","mainPageReducer","wordPairReducer","wordPairEpics","annotationReducer","annotationEpics","publicRuntimeConfig","rootReducer","wordPairState","mainPageState","annotationState","rootEpic","initStore","initialState","epicMiddleware","dependencies","apiBaseUrl","logger","collapsed","reduxMiddleware","store","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,oBAAT,EAA+BC,YAA/B,QAAmD,kBAAnD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAOC,eAAP;AACA,OAAOC,eAAP;AACA,OAAOC,aAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,eAAP;;iBAEgCL,SAAS,E;IAAjCM,mB,cAAAA,mB;;AAER,IAAMC,WAAW,GAAGZ,eAAe,CAAC;AAClCa,EAAAA,aAAa,EAAEN,eADmB;AAElCO,EAAAA,aAAa,EAAER,eAFmB;AAGlCS,EAAAA,eAAe,EAAEN;AAHiB,CAAD,CAAnC;AAMA,IAAMO,QAAQ,GAAGb,YAAY,CAC3BK,aAD2B,EAE3BE,eAF2B,CAA7B;AAKA,eAAe,SAASO,SAAT,CAAoBC,YAApB,EAAkC;AAC/C,MAAMC,cAAc,GAAGjB,oBAAoB,CAAC;AAC1CkB,IAAAA,YAAY,EAAE;AACZC,MAAAA,UAAU,EAAEV,mBAAmB,CAACU;AADpB;AAD4B,GAAD,CAA3C;AAKA,MAAMC,MAAM,GAAGrB,YAAY,CAAC;AAAEsB,IAAAA,SAAS,EAAE;AAAb,GAAD,CAA3B,CAN+C,CAME;;AACjD,MAAMC,eAAe,GAAGzB,eAAe,CAACoB,cAAD,EAAiBG,MAAjB,CAAvC;AAEA,MAAMG,KAAK,GAAG3B,WAAW,CAACc,WAAD,EAAcM,YAAd,EAA4Bd,mBAAmB,CAACoB,eAAD,CAA/C,CAAzB;AACAL,EAAAA,cAAc,CAACO,GAAf,CAAmBV,QAAnB;AAEA,SAAOS,KAAP;AACD","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport { createEpicMiddleware, combineEpics } from 'redux-observable'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport getConfig from \"next/config\";\r\n\r\nimport mainPageReducer from 'modules/MainPage/reducer'\r\nimport wordPairReducer from 'modules/WordPair/reducer'\r\nimport wordPairEpics from 'modules/WordPair/epics'\r\nimport annotationReducer from 'modules/Annotation/reducer'\r\nimport annotationEpics from 'modules/Annotation/epics'\r\n\r\nconst { publicRuntimeConfig } = getConfig();\r\n\r\nconst rootReducer = combineReducers({\r\n  wordPairState: wordPairReducer,\r\n  mainPageState: mainPageReducer,\r\n  annotationState: annotationReducer,\r\n})\r\n\r\nconst rootEpic = combineEpics(\r\n  wordPairEpics,\r\n  annotationEpics,\r\n)\r\n\r\nexport default function initStore (initialState) {\r\n  const epicMiddleware = createEpicMiddleware({\r\n    dependencies: {\r\n      apiBaseUrl: publicRuntimeConfig.apiBaseUrl,\r\n    }\r\n  })\r\n  const logger = createLogger({ collapsed: true }) // log every action to see what's happening behind the scenes.\r\n  const reduxMiddleware = applyMiddleware(epicMiddleware, logger)\r\n\r\n  const store = createStore(rootReducer, initialState, composeWithDevTools(reduxMiddleware,))\r\n  epicMiddleware.run(rootEpic)\r\n\r\n  return store\r\n}\r\n"]},"metadata":{},"sourceType":"module"}